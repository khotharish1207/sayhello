{"version":3,"sources":["components/LoadingModal.js","utils/index.js","components/StartMeet.js","utils/coockie.js","App.js","serviceWorker.js","index.js"],"names":["LoadingModal","show","Modal","size","centered","backdropClassName","Header","Title","Body","Row","className","Spinner","animation","variant","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ref","detectMob","some","toMatchItem","navigator","userAgent","match","a","data","push","timeStap","Date","toLocaleString","device","options","name","value","StartMeet","onClose","onStart","urlParser","UrlParse","window","location","href","room","query","roomId","useState","radioValue","setRadioValue","setRoom","nameEQ","ca","document","cookie","split","i","length","c","charAt","substring","indexOf","getCookie","displayName","setDisplayName","keyboard","InputGroup","Prepend","Text","id","FormControl","onChange","e","target","aria-label","aria-describedby","ButtonGroup","toggle","map","opt","idx","ToggleButton","key","type","checked","Number","currentTarget","Footer","Button","block","onClick","history","pushState","toString","startAudioOnly","analytics","track","trackEvent","postData","disabled","JitsiMeetComponent","loading","setLoading","startMeet","setStart","showToast","setToast","jitsiContainerStyle","display","width","height","useEffect","JitsiMeetExternalAPI","identify","alert","fluid","style","roomName","parentNode","getElementById","interfaceConfigOverwrite","DEFAULT_BACKGROUND","DISPLAY_WELCOME_PAGE_CONTENT","MOBILE_APP_PROMO","PROVIDER_NAME","APP_NAME","SHOW_BRAND_WATERMARK","SHOW_CHROME_EXTENSION_BANNER","VIDEO_QUALITY_LABEL_DISABLED","SHOW_DEEP_LINKING_IMAGE","SHOW_JITSI_WATERMARK","SHOW_POWERED_BY","SHOW_PROMOTIONAL_CLOSE_PAGE","SHOW_WATERMARK_FOR_GUESTS","VERTICAL_FILMSTRIP","JITSI_WATERMARK_LINK","BRAND_WATERMARK_LINK","DEFAULT_LOGO_URL","DEFAULT_REMOTE_DISPLAY_NAME","DEFAULT_WELCOME_PAGE_LOGO_URL","TOOLBAR_BUTTONS","filter","x","configOverwrite","disableSimulcast","enableClosePage","enableWelcomePage","enableNoAudioDetection","disableDeepLinking","enableNoisyMicDetection","startWithVideoMuted","api","executeCommand","addEventListener","reload","error","console","position","margin","text","clipboard","writeText","then","setTimeout","err","Toast","Boolean","hostname","hist","createBrowserHistory","getTime","ReactDOM","render","StrictMode","path","component","App","to","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9d5377cb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Modal, Spinner, Row } from \"react-bootstrap\";\r\n\r\nfunction LoadingModal({ show }) {\r\n  return (\r\n    <Modal show={show} size=\"sm\" centered backdropClassName={`backdropClassName`}>\r\n      <Modal.Header>\r\n        <Modal.Title>Loading</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Row className=\"justify-content-center\">\r\n          <Spinner animation=\"grow\" variant=\"primary\" />\r\n        </Row>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default LoadingModal;\r\n","import * as firebase from \"firebase\";\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyBIAy4TTEd-t5UyOOpWszIwEqpFK4BawGI\",\r\n  authDomain: \"conference-67f3e.firebaseapp.com\",\r\n  databaseURL: \"https://conference-67f3e.firebaseio.com\",\r\n  projectId: \"conference-67f3e\",\r\n  storageBucket: \"conference-67f3e.appspot.com\",\r\n  messagingSenderId: \"567472190800\",\r\n  appId: \"1:567472190800:web:2dda169ab525baa1d4e855\",\r\n  // measurementId: \"G-GWN91VR3S8\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nvar db = firebase.database();\r\nvar ref = db.ref(\"/conferences\");\r\n\r\nfunction detectMob() {\r\n  const toMatch = [\r\n    /Android/i,\r\n    /webOS/i,\r\n    /iPhone/i,\r\n    /iPad/i,\r\n    /iPod/i,\r\n    /BlackBerry/i,\r\n    /Windows Phone/i,\r\n  ];\r\n\r\n  return toMatch.some((toMatchItem) => {\r\n    return navigator.userAgent.match(toMatchItem);\r\n  });\r\n}\r\n\r\nfunction trackEvent(...params) {\r\n  if (window.analytics) {\r\n    window.analytics.track(...params);\r\n  }\r\n}\r\n\r\nfunction identify(...params) {\r\n  if (window.analytics) {\r\n    window.analytics.identify(...params);\r\n  }\r\n}\r\n\r\nasync function postData(data = {}) {\r\n  ref.push({\r\n    ...data,\r\n    timeStap: new Date().toLocaleString(),\r\n    device: detectMob() ? \"Mobile\" : \"Desktop\",\r\n  });\r\n  /*const response = await fetch(\r\n    `https://mock-server-hk.herokuapp.com/sayhello`,\r\n    {\r\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n      //   mode: 'cors', // no-cors, *cors, same-origin\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: \"same-origin\", // include, *same-origin, omit\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      redirect: \"follow\", // manual, *follow, error\r\n      referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n      body: JSON.stringify({\r\n        ...data,\r\n        timeStap: new Date().toLocaleString(),\r\n        device: detectMob() ? \"Mobile\" : \"Desktop\",\r\n      }), // body data type must match \"Content-Type\" header\r\n    }\r\n  );\r\n  return response.json(); // parses JSON response into native JavaScript objects*/\r\n}\r\n\r\nexport { detectMob, trackEvent, identify, postData };\r\n","import React, { useState } from \"react\";\r\nimport UrlParse from \"url-parse\";\r\nimport {\r\n  Modal,\r\n  InputGroup,\r\n  FormControl,\r\n  Button,\r\n  ButtonGroup,\r\n  ToggleButton,\r\n} from \"react-bootstrap\";\r\nimport { setCookie, getCookie } from \"../utils/coockie\";\r\nimport { trackEvent, postData } from \"../utils\";\r\n\r\nconst options = [\r\n  { name: \"Audio\", value: 1 },\r\n  { name: \"Video\", value: 2 },\r\n];\r\n\r\nfunction StartMeet({ onClose, onStart, show }) {\r\n  const urlParser = new UrlParse(window.location.href, true);\r\n  const room = urlParser.query.roomId;\r\n\r\n  const [radioValue, setRadioValue] = useState(1);\r\n  const [roomId, setRoom] = useState(room || \"\");\r\n  const [displayName, setDisplayName] = useState(\r\n    getCookie(\"displayName\") || \"\"\r\n  );\r\n\r\n  const onStartMeet = () => {\r\n    setCookie(\"displayName\", displayName);\r\n    urlParser.query.roomId = roomId;\r\n    window.history.pushState(\"\", \"\", urlParser.toString());\r\n    const startAudioOnly = radioValue === 1;\r\n\r\n    onClose();\r\n    onStart(roomId, displayName, startAudioOnly);\r\n\r\n    trackEvent(\"Start Meeting\", {\r\n      roomId,\r\n      displayName,\r\n    });\r\n    postData({\r\n        roomId,\r\n        displayName,\r\n      })\r\n  };\r\n\r\n  return (\r\n    <Modal show={show} keyboard={false} centered backdropClassName={`backdropClassName`}>\r\n      <Modal.Header className=\"justify-content-center\">\r\n        <Modal.Title>Start Meet</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <InputGroup className=\"mb-3\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text  id=\"inputGroup-sizing-default \">\r\n              Room Id\r\n            </InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <FormControl\r\n            onChange={(e) => setRoom(e.target.value)}\r\n            value={roomId}\r\n            aria-label=\"Default\"\r\n            aria-describedby=\"inputGroup-sizing-default\"\r\n          />\r\n        </InputGroup>\r\n        <InputGroup className=\"mb-3\">\r\n          <InputGroup.Prepend >\r\n            <InputGroup.Text  id=\"inputGroup-sizing-default \">\r\n              Name\r\n            </InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <FormControl\r\n            onChange={(e) => setDisplayName(e.target.value)}\r\n            value={displayName}\r\n            aria-label=\"Default\"\r\n            aria-describedby=\"inputGroup-sizing-default\"\r\n          />\r\n        </InputGroup>\r\n        <InputGroup className=\"mb-3\">\r\n          <ButtonGroup toggle>\r\n            {options.map((opt, idx) => (\r\n              <ToggleButton\r\n                key={idx}\r\n                type=\"radio\"\r\n                variant={\r\n                  radioValue === opt.value ? \"primary\" : \"outline-primary\"\r\n                }\r\n                name=\"radio\"\r\n                value={opt.value}\r\n                checked={radioValue === opt.value}\r\n                onChange={(e) => setRadioValue(Number(e.currentTarget.value))}\r\n              >\r\n                {opt.name}\r\n              </ToggleButton>\r\n            ))}\r\n          </ButtonGroup>\r\n        </InputGroup>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button\r\n          variant=\"primary\"\r\n          block\r\n          onClick={onStartMeet}\r\n          disabled={!roomId || !displayName}\r\n        >\r\n          Say Hello\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default StartMeet;\r\n","function setCookie(name, value, days) {\r\n  var expires = \"\";\r\n  //   if (days) {\r\n  //     var date = new Date();\r\n  //     date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\r\n  //     expires = \"; expires=\" + date.toUTCString();\r\n  //   }\r\n  document.cookie = name + \"=\" + (value || \"\") + expires + \"; path=/\";\r\n}\r\nfunction getCookie(name) {\r\n  var nameEQ = name + \"=\";\r\n  var ca = document.cookie.split(\";\");\r\n  for (var i = 0; i < ca.length; i++) {\r\n    var c = ca[i];\r\n    while (c.charAt(0) === \" \") c = c.substring(1, c.length);\r\n    if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\r\n  }\r\n  return null;\r\n}\r\nfunction eraseCookie(name) {\r\n  document.cookie = name + \"=; Max-Age=-99999999;\";\r\n}\r\n\r\nexport { setCookie, getCookie, eraseCookie };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Row, Toast, Button } from \"react-bootstrap\";\r\nimport LoadingModal from \"./components/LoadingModal\";\r\nimport StartMeet from \"./components/StartMeet\";\r\nimport { detectMob, identify } from \"./utils\";\r\n\r\nfunction JitsiMeetComponent() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [startMeet, setStart] = useState(false);\r\n  const [showToast, setToast] = useState(false);\r\n\r\n  const containerStyle = {\r\n    width: \"100%\",\r\n    height: \"100vh\",\r\n  };\r\n\r\n  const jitsiContainerStyle = {\r\n    display: loading ? \"none\" : \"block\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  };\r\n\r\n  function startConference(roomId, displayName, startAudioOnly) {\r\n    setLoading(true);\r\n    try {\r\n      // const urlParser = new UrlParse(window.location.href, true);\r\n      // let roomId = urlParser.query.roomId;\r\n      const domain = \"meet.jit.si\";\r\n      const options = {\r\n        roomName: `${roomId}`,\r\n        parentNode: document.getElementById(\"conf-container\"),\r\n        interfaceConfigOverwrite: {\r\n          DEFAULT_BACKGROUND: '#007bff',\r\n          DISPLAY_WELCOME_PAGE_CONTENT: false,\r\n          MOBILE_APP_PROMO: false,\r\n          PROVIDER_NAME: 'Say Hello',\r\n          APP_NAME: `Say Hello`,\r\n\r\n          SHOW_BRAND_WATERMARK: false,\r\n          SHOW_CHROME_EXTENSION_BANNER: false,\r\n          VIDEO_QUALITY_LABEL_DISABLED: true,\r\n\r\n          SHOW_DEEP_LINKING_IMAGE: false,\r\n          SHOW_JITSI_WATERMARK: false,\r\n          SHOW_POWERED_BY: false,\r\n          SHOW_PROMOTIONAL_CLOSE_PAGE: false,\r\n          SHOW_WATERMARK_FOR_GUESTS: false,\r\n\r\n          VERTICAL_FILMSTRIP: !detectMob(),\r\n          JITSI_WATERMARK_LINK: window.location.href,\r\n          BRAND_WATERMARK_LINK: window.location.href,\r\n\r\n          DEFAULT_LOGO_URL: './camera.jpg',\r\n          DEFAULT_REMOTE_DISPLAY_NAME: 'Fellow Speaker',\r\n          DEFAULT_WELCOME_PAGE_LOGO_URL: './camera.jpg',\r\n\r\n          // filmStripOnly: false,\r\n          // DEFAULT_REMOTE_DISPLAY_NAME: \"\",\r\n          // SHOW_JITSI_WATERMARK: false,\r\n          // SHOW_WATERMARK_FOR_GUESTS: false,\r\n          // APP_NAME: `Say Hello`,\r\n          // DISPLAY_WELCOME_PAGE_TOOLBAR_ADDITIONAL_CONTENT: false,\r\n          // NATIVE_APP_NAME: `Say Hello`,\r\n          // PROVIDER_NAME: \"Harish\",\r\n          // INVITATION_POWERED_BY: false,\r\n          // VERTICAL_FILMSTRIP: true,\r\n          // ENABLE_FEEDBACK_ANIMATION: true,\r\n          // VIDEO_QUALITY_LABEL_DISABLED: true,\r\n          // SHOW_CHROME_EXTENSION_BANNER: false,\r\n          // HIDE_KICK_BUTTON_FOR_GUESTS: true,\r\n          TOOLBAR_BUTTONS: [\r\n            \"microphone\",\r\n            \"camera\",\r\n            \"closedcaptions\",\r\n            !detectMob() && \"desktop\",\r\n            \"fullscreen\",\r\n            \"hangup\",\r\n            \"profile\",\r\n            \"chat\",\r\n            \"sharedvideo\",\r\n            \"raisehand\",\r\n            \"videoquality\",\r\n            \"filmstrip\",\r\n            \"mute-everyone\",\r\n            'tileview',\r\n            // \"security\",\r\n          ].filter((x) => x),\r\n        },\r\n        configOverwrite: {\r\n          disableSimulcast: false,\r\n          enableClosePage: false,\r\n          enableWelcomePage: false,\r\n          enableNoAudioDetection: false,\r\n          disableDeepLinking: true,\r\n          enableNoisyMicDetection: false,\r\n\r\n          startWithVideoMuted: startAudioOnly\r\n        },\r\n      };\r\n\r\n      const api = new window.JitsiMeetExternalAPI(domain, options);\r\n      setLoading(false);\r\n      api.executeCommand(\"displayName\", displayName);\r\n\r\n      api.addEventListener(\"videoConferenceJoined\", () => {\r\n        setLoading(false);\r\n\r\n      });\r\n\r\n      api.addEventListener(\"readyToClose\", () => {\r\n        window.location.reload();\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Failed to load Jitsi API\", error);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // verify the JitsiMeetExternalAPI constructor is added to the global..\r\n    if (window.JitsiMeetExternalAPI) {\r\n      setStart(true);\r\n      identify({ device: detectMob() ? \"Mobile\" : \"Desktop\" });\r\n    } else alert(\"Jitsi Meet API script not loaded\");\r\n  }, []);\r\n\r\n  const copyTextToClipboard = (text) => {\r\n    navigator.clipboard.writeText(window.location.href).then(\r\n      function () {\r\n        setToast(true);\r\n        setTimeout(() => {\r\n          setToast(false);\r\n        }, 1500);\r\n      },\r\n      function (err) {\r\n        console.error(\"Could not copy text: \");\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div fluid style={containerStyle}>\r\n      <LoadingModal show={loading} />\r\n      <StartMeet\r\n        show={startMeet}\r\n        onStart={startConference}\r\n        onClose={() => setStart(false)}\r\n      />\r\n      {!loading && !startMeet && (\r\n        <Row style={{ position: \"absolute\", margin: \"10px\" }}>\r\n          <Button\r\n            variant=\"outline-light\"\r\n            size=\"sm\"\r\n            onClick={copyTextToClipboard}\r\n          >\r\n            Copy meeting\r\n          </Button>\r\n          <Toast show={showToast}>\r\n            <Toast.Body>Url copied to clipboard</Toast.Body>\r\n          </Toast>\r\n        </Row>\r\n      )}\r\n      <div id=\"conf-container\" style={jitsiContainerStyle} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JitsiMeetComponent;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport UrlParse from \"url-parse\";\r\nimport { Router, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst urlParser = new UrlParse(window.location.href, true);\r\nlet roomId = urlParser.query.roomId;\r\n\r\nconst hist = createBrowserHistory();\r\n\r\nif (!roomId) {\r\n  roomId = new Date().getTime();\r\n\r\n  urlParser.query.roomId = roomId;\r\n  window.history.pushState(\"\", \"\", urlParser.toString());\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router history={hist}>\r\n      <Switch>\r\n        <Route path=\"/\" component={App} />\r\n        <Redirect to=\"/\" />\r\n      </Switch>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}