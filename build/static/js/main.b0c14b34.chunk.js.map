{"version":3,"sources":["components/LoadingModal.js","components/StartMeet.js","utils/coockie.js","App.js","serviceWorker.js","index.js"],"names":["LoadingModal","show","Modal","size","centered","Header","Title","Body","Row","className","Spinner","animation","variant","StartMeet","onClose","onStart","urlParser","UrlParse","window","location","href","room","query","roomId","useState","setRoom","name","nameEQ","ca","document","cookie","split","i","length","c","charAt","substring","indexOf","getCookie","displayName","setDisplayName","backdrop","keyboard","InputGroup","Prepend","Text","id","FormControl","onChange","e","target","value","aria-label","aria-describedby","Footer","Button","onClick","history","pushState","toString","JitsiMeetComponent","loading","setLoading","startMeet","setStart","jitsiContainerStyle","display","width","height","useEffect","JitsiMeetExternalAPI","alert","Container","fluid","style","options","roomName","parentNode","getElementById","interfaceConfigOverwrite","filmStripOnly","DEFAULT_REMOTE_DISPLAY_NAME","SHOW_JITSI_WATERMARK","SHOW_WATERMARK_FOR_GUESTS","APP_NAME","DISPLAY_WELCOME_PAGE_TOOLBAR_ADDITIONAL_CONTENT","NATIVE_APP_NAME","PROVIDER_NAME","INVITATION_POWERED_BY","VERTICAL_FILMSTRIP","ENABLE_FEEDBACK_ANIMATION","VIDEO_QUALITY_LABEL_DISABLED","SHOW_CHROME_EXTENSION_BANNER","HIDE_KICK_BUTTON_FOR_GUESTS","TOOLBAR_BUTTONS","configOverwrite","disableSimulcast","enableClosePage","enableWelcomePage","disableDeepLinking","api","addEventListener","executeCommand","reload","error","console","Boolean","hostname","match","Object","defineProperty","navigator","get","Date","getTime","log","ReactDOM","render","StrictMode","App","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b0c14b34.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Modal, Spinner, Row } from \"react-bootstrap\";\r\n\r\nfunction LoadingModal({ show }) {\r\n  return (\r\n    <Modal show={show} size=\"sm\" centered>\r\n      <Modal.Header>\r\n        <Modal.Title>Loading</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Spinner animation=\"grow\" variant=\"primary\" />\r\n        </Row>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default LoadingModal;\r\n","import React, { useState } from \"react\";\r\nimport UrlParse from \"url-parse\";\r\nimport { Modal, InputGroup, FormControl, Button } from \"react-bootstrap\";\r\nimport { setCookie, getCookie } from \"../utils/coockie\";\r\n\r\nfunction StartMeet({ onClose, onStart, show }) {\r\n  const urlParser = new UrlParse(window.location.href, true);\r\n  const room = urlParser.query.roomId;\r\n  const [roomId, setRoom] = useState(room || \"\");\r\n\r\n  const [displayName, setDisplayName] = useState(\r\n    getCookie(\"displayName\") || \"My Name\"\r\n  );\r\n\r\n  const onStartMeet = () => {\r\n    setCookie(\"displayName\", displayName);\r\n    urlParser.query.roomId = roomId;\r\n    window.history.pushState(\"\", \"\", urlParser.toString());\r\n    onClose();\r\n    onStart(roomId, displayName);\r\n  };\r\n\r\n  return (\r\n    <Modal show={show} backdrop=\"static\" keyboard={false} centered>\r\n      <Modal.Header className=\"justify-content-md-center\">\r\n        <Modal.Title>Start Meet</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <InputGroup className=\"mb-3\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text id=\"inputGroup-sizing-default\">\r\n              Room Id\r\n            </InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <FormControl\r\n            onChange={(e) => setRoom(e.target.value)}\r\n            value={roomId}\r\n            aria-label=\"Default\"\r\n            aria-describedby=\"inputGroup-sizing-default\"\r\n          />\r\n        </InputGroup>\r\n        <br />\r\n        <InputGroup className=\"mb-3\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text id=\"inputGroup-sizing-default\">\r\n              Name\r\n            </InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <FormControl\r\n            onChange={(e) => setDisplayName(e.target.value)}\r\n            value={displayName}\r\n            aria-label=\"Default\"\r\n            aria-describedby=\"inputGroup-sizing-default\"\r\n          />\r\n        </InputGroup>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"primary\" onClick={onStartMeet}>\r\n          Start Meet\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default StartMeet;\r\n","function setCookie(name, value, days) {\r\n  var expires = \"\";\r\n  //   if (days) {\r\n  //     var date = new Date();\r\n  //     date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\r\n  //     expires = \"; expires=\" + date.toUTCString();\r\n  //   }\r\n  document.cookie = name + \"=\" + (value || \"\") + expires + \"; path=/\";\r\n}\r\nfunction getCookie(name) {\r\n  var nameEQ = name + \"=\";\r\n  var ca = document.cookie.split(\";\");\r\n  for (var i = 0; i < ca.length; i++) {\r\n    var c = ca[i];\r\n    while (c.charAt(0) == \" \") c = c.substring(1, c.length);\r\n    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);\r\n  }\r\n  return null;\r\n}\r\nfunction eraseCookie(name) {\r\n  document.cookie = name + \"=; Max-Age=-99999999;\";\r\n}\r\n\r\nexport { setCookie, getCookie, eraseCookie };\r\n","import React, { useState, useEffect } from \"react\";\nimport UrlParse from \"url-parse\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport LoadingModal from \"./components/LoadingModal\";\nimport StartMeet from \"./components/StartMeet\";\n\n// if (!roomId) {\n//   roomId = new Date().getTime();\n\n//   urlParser.query.roomId = roomId;\n//   window.history.pushState(\"\", \"\", urlParser.toString());\n// }\n\nfunction JitsiMeetComponent() {\n  const [loading, setLoading] = useState(false);\n  const [startMeet, setStart] = useState(false);\n  const containerStyle = {\n    width: \"100%\",\n    height: \"100vh\",\n  };\n\n  const jitsiContainerStyle = {\n    display: loading ? \"none\" : \"block\",\n    width: \"100%\",\n    height: \"100%\",\n  };\n\n  function startConference(roomId, displayName) {\n    setLoading(true);\n    try {\n      // const urlParser = new UrlParse(window.location.href, true);\n      // let roomId = urlParser.query.roomId;\n      const domain = \"meet.jit.si\";\n      const options = {\n        roomName: `${roomId}`,\n        parentNode: document.getElementById(\"jitsi-container\"),\n        interfaceConfigOverwrite: {\n          filmStripOnly: false,\n          DEFAULT_REMOTE_DISPLAY_NAME: \"\",\n          SHOW_JITSI_WATERMARK: false,\n          SHOW_WATERMARK_FOR_GUESTS: false,\n          APP_NAME: `Say Hello`,\n          DISPLAY_WELCOME_PAGE_TOOLBAR_ADDITIONAL_CONTENT: false,\n          NATIVE_APP_NAME: `Say Hello`,\n          PROVIDER_NAME: \"Harish\",\n          INVITATION_POWERED_BY: false,\n          VERTICAL_FILMSTRIP: false,\n          ENABLE_FEEDBACK_ANIMATION: true,\n          VIDEO_QUALITY_LABEL_DISABLED: true,\n          SHOW_CHROME_EXTENSION_BANNER: false,\n          HIDE_KICK_BUTTON_FOR_GUESTS: true,\n          TOOLBAR_BUTTONS: [\n            \"microphone\",\n            \"camera\",\n            \"closedcaptions\",\n            \"desktop\",\n            \"fullscreen\",\n            \"hangup\",\n            \"profile\",\n            \"chat\",\n            // \"recording\",\n            // \"livestreaming\",\n            \"sharedvideo\",\n            \"raisehand\",\n            \"videoquality\",\n            \"filmstrip\",\n            // \"invite\",\n            \"mute-everyone\",\n            \"security\",\n          ],\n        },\n        configOverwrite: {\n          disableSimulcast: false,\n          enableClosePage: false,\n          enableWelcomePage: true,\n          disableDeepLinking: true,\n        },\n      };\n\n      const api = new window.JitsiMeetExternalAPI(domain, options);\n      api.addEventListener(\"videoConferenceJoined\", () => {\n        setLoading(false);\n        api.executeCommand(\"displayName\", displayName);\n      });\n\n      api.addEventListener(\"readyToClose\", () => {\n        window.location.reload();\n      });\n    } catch (error) {\n      console.error(\"Failed to load Jitsi API\", error);\n    }\n  }\n\n  useEffect(() => {\n    // verify the JitsiMeetExternalAPI constructor is added to the global..\n    if (window.JitsiMeetExternalAPI) setStart(true);\n    //startConference();\n    else alert(\"Jitsi Meet API script not loaded\");\n  }, []);\n\n  return (\n    <Container fluid style={containerStyle}>\n      <LoadingModal show={loading} />\n      <StartMeet\n        show={startMeet}\n        onStart={startConference}\n        onClose={() => setStart(false)}\n      />\n      <div id=\"jitsi-container\" style={jitsiContainerStyle} />\n    </Container>\n  );\n}\n\nexport default JitsiMeetComponent;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport UrlParse from \"url-parse\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nObject.defineProperty(navigator, 'userAgent', {\n  get: function () { return \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36\"; }\n});\n\nconst urlParser = new UrlParse(window.location.href, true);\nlet roomId = urlParser.query.roomId;\nlet displayName = urlParser.query.displayName;\n// || (cookiesManager.getUser() || {}).displayName;\n\nif (!roomId) {\n  roomId = new Date().getTime();\n\n  urlParser.query.roomId = roomId;\n  window.history.pushState(\"\", \"\", urlParser.toString());\n}\n\nconsole.log(`urlParser-----`, urlParser);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}